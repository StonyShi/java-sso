<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">


    <bean id="abstractDataSource" class="com.alibaba.druid.pool.DruidDataSource" abstract="true">
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${initialSize}"/>
        <property name="minIdle" value="${minIdle}"/>
        <property name="maxActive" value="${maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="${validationQuery}"/>
        <property name="testWhileIdle" value="${testWhileIdle}"/>
        <property name="testOnBorrow" value="${testOnBorrow}"/>
        <property name="testOnReturn" value="${testOnReturn}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${maxPoolPreparedStatementPerConnectionSize}"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${filters}"/>
    </bean>

    <bean id="dataSource" parent="abstractDataSource" p:driverClassName="${mysql.jdbc.driverClass}"
          p:url="${sso.db.jdbcurl}">
        <property name="username" value="${sso.db.username}"/>
        <property name="password" value="${sso.db.password}"/>
    </bean>

    <!--  TransactionManager -->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:advice id="TXAdvice" transaction-manager="dataSourceTransactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"
                       isolation="REPEATABLE_READ"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"
                       isolation="REPEATABLE_READ"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"
                       isolation="REPEATABLE_READ"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"
                       isolation="REPEATABLE_READ"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"
                       isolation="REPEATABLE_READ"/>
            <tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception"
                       isolation="REPEATABLE_READ"/>
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception"
                       isolation="REPEATABLE_READ"/>
            <tx:method name="merge*" propagation="REQUIRED" rollback-for="java.lang.Exception"
                       isolation="REPEATABLE_READ"/>
            <tx:method name="task*" propagation="REQUIRED" rollback-for="java.lang.Exception"
                       isolation="REPEATABLE_READ"/>
            <tx:method name="edit*" propagation="REQUIRED" rollback-for="java.lang.Exception"
                       isolation="REPEATABLE_READ"/>
            <tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Exception"
                       isolation="REPEATABLE_READ"/>
            <tx:method name="upload*" propagation="REQUIRED" rollback-for="java.lang.Exception"
                       isolation="REPEATABLE_READ"/>
            <tx:method name="send*" propagation="REQUIRED" rollback-for="java.lang.Exception"
                       isolation="REPEATABLE_READ"/>
            <tx:method name="pay*" propagation="REQUIRED" rollback-for="java.lang.Exception"
                       isolation="REPEATABLE_READ"/>

            <tx:method name="check*" read-only="true" rollback-for="java.lang.Exception"/>
            <tx:method name="query*" read-only="true" rollback-for="java.lang.Exception"/>
            <tx:method name="show*" read-only="true" rollback-for="java.lang.Exception"/>
            <tx:method name="get*" read-only="true" rollback-for="java.lang.Exception"/>
            <tx:method name="count*" read-only="true" rollback-for="java.lang.Exception"/>
            <tx:method name="find*" read-only="true" rollback-for="java.lang.Exception"/>
            <tx:method name="list*" read-only="true" rollback-for="java.lang.Exception"/>
            <tx:method name="select*" read-only="true" rollback-for="java.lang.Exception"/>
            <tx:method name="is*" read-only="true" rollback-for="java.lang.Exception"/>
            <tx:method name="*" read-only="true" propagation="SUPPORTS" rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>
    <!--   dataSource configure end -->

    <!-- transaction AOP configure -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <aop:config proxy-target-class="true">
        <aop:pointcut id="txServicePointcut" expression="execution(* com.stony.sso.service.service..*(..))"/>
        <aop:advisor advice-ref="TXAdvice" pointcut-ref="txServicePointcut"/>
    </aop:config>
</beans>
